/*************************************************************
 * COMPLETE UPDATE GUIDE - BAR CHARTS & TOTAL SUM
 * Follow these steps in order
 *************************************************************/

/*************************************************************
 * STEP 1: UPDATE Azure Function (index.js)
 * Find the calculateDynamicStats function around line 350-400
 * Replace from "// Calculate unique routes" to the return statement
 *************************************************************/

// REPLACE THIS ENTIRE SECTION:
        // Calculate unique routes
        const uniqueRoutes = new Set();
        // ... all the route code ...
        const topRoutes = Object.entries(routeCounts)
        // ... through to ...
            flightMetrics: {
                title: "Unike ruter",
                value: uniqueRoutes.size,
                subtitle: "Forskjellige flyreiser",
                topRoutes: topRoutes
            }

// WITH THIS:
        // Calculate total amount sum from flight data
        let totalAmount = 0;
        let currencyCode = 'NOK'; // Default currency
        
        flightData.forEach(record => {
            if (record.Amount && !isNaN(record.Amount)) {
                totalAmount += parseFloat(record.Amount);
            }
            // Get currency from records (should be consistent)
            if (record.Currency && String(record.Currency).trim() !== '') {
                currencyCode = String(record.Currency).trim();
            }
        });
        
        context.log(`💰 Total amount calculated: ${totalAmount.toFixed(2)} ${currencyCode}`);
        context.log(`📈 Stats calculated - Airlines: ${airlinesWithPercentages.length}, Destinations: ${allDestinationsWithNames.length}, Total Sum: ${totalAmount.toFixed(2)}`);
        
        return {
            mostUsedAirlines: {
                title: "Mest brukte flyselskap",
                primary: airlinesWithPercentages[0] || { code: 'N/A', name: 'Ingen data', count: 0, percentage: 0 },
                secondary: airlinesWithPercentages.slice(1, 3),
                all: airlinesWithPercentages
            },
            mostVisitedDestination: {
                title: "Mest besøkte destinasjon",
                destination: allDestinationsWithNames[0] ? {
                    code: allDestinationsWithNames[0].code,
                    name: allDestinationsWithNames[0].name
                } : { code: 'N/A', name: 'Ingen data' },
                count: allDestinationsWithNames[0]?.count || 0,
                all: allDestinationsWithNames
            },
            totalSum: {
                title: "Total Sum",
                value: totalAmount.toFixed(2),
                currency: currencyCode,
                subtitle: `Sum av ${totalFlights.toLocaleString()} flyreiser`,
                formattedValue: `${currencyCode} ${totalAmount.toLocaleString('no-NO', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`
            }
        };

/*************************************************************
 * STEP 2: ADD CSS for bar charts to styles.css
 * Add this at the end of the file
 *************************************************************/

/* Bar chart styles for airline visualization */
.airline-chart {
    margin-top: 20px;
    padding-top: 15px;
    border-top: 1px solid #e5e7eb;
}

.airline-bar {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
    font-size: 13px;
    padding: 4px 0;
}

.airline-bar-label {
    min-width: 50px;
    max-width: 50px;
    font-weight: 600;
    color: #1e293b;
    font-size: 12px;
    text-align: left;
}

.airline-bar-visual {
    flex: 1;
    height: 28px;
    background: linear-gradient(90deg, #3b82f6 0%, #2563eb 100%);
    border-radius: 6px;
    position: relative;
    margin: 0 12px;
    transition: all 0.3s ease;
    box-shadow: 0 1px 3px rgba(59, 130, 246, 0.2);
}

.airline-bar-visual:hover {
    transform: scaleX(1.02);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
    background: linear-gradient(90deg, #2563eb 0%, #1d4ed8 100%);
}

.airline-bar-count {
    min-width: 100px;
    text-align: right;
    color: #475569;
    font-weight: 600;
    font-size: 13px;
}

.airline-chart-title {
    font-size: 12px;
    font-weight: 600;
    color: #64748b;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 15px;
}

/*************************************************************
 * STEP 3: UPDATE dashboard.js
 * Find updateCard function and replace it with this version
 *************************************************************/

function updateCard(card, data) {
    try {
        card.classList.remove('loading', 'error');
        
        const statNumber = card.querySelector('.stat-number');
        const statLabel = card.querySelector('.stat-label');
        
        // Check if this is the airlines card (it will have chart data)
        const isAirlinesCard = data.details && data.details.length > 0 && data.details[0].code;
        
        if (statNumber && data.value) {
            let displayValue = data.value;
            
            if (data.label && data.label.includes('\n')) {
                const parts = data.label.split('\n');
                displayValue = parts[0];
                
                if (statLabel) {
                    statLabel.textContent = `${data.value} - ${parts[1]}`;
                }
            } else {
                if (statLabel && data.label) {
                    statLabel.textContent = data.label;
                }
            }
            
            statNumber.textContent = displayValue;
            
            if (displayValue.length > 8) {
                statNumber.classList.add('small-text');
            }
            
            // ADD BAR CHART FOR AIRLINES
            if (isAirlinesCard && data.details) {
                // Remove existing chart if any
                const existingChart = card.querySelector('.airline-chart');
                if (existingChart) {
                    existingChart.remove();
                }
                
                // Create new chart with top 5 airlines
                const chartContainer = document.createElement('div');
                chartContainer.className = 'airline-chart';
                
                const chartTitle = document.createElement('div');
                chartTitle.className = 'airline-chart-title';
                chartTitle.textContent = 'Top Airlines';
                chartContainer.appendChild(chartTitle);
                
                // Get top 5 airlines
                const topAirlines = data.details.slice(0, 5);
                const maxCount = topAirlines[0]?.count || 1;
                
                topAirlines.forEach(airline => {
                    const barWrapper = document.createElement('div');
                    barWrapper.className = 'airline-bar';
                    
                    const label = document.createElement('div');
                    label.className = 'airline-bar-label';
                    label.textContent = airline.code;
                    
                    const visual = document.createElement('div');
                    visual.className = 'airline-bar-visual';
                    const widthPercent = (airline.count / maxCount) * 100;
                    visual.style.width = `${widthPercent}%`;
                    
                    const count = document.createElement('div');
                    count.className = 'airline-bar-count';
                    count.textContent = `${airline.count.toLocaleString()} (${airline.percentage}%)`;
                    
                    barWrapper.appendChild(label);
                    barWrapper.appendChild(visual);
                    barWrapper.appendChild(count);
                    chartContainer.appendChild(barWrapper);
                });
                
                // Add chart after the stat label
                const cardContent = card.querySelector('.stat-card') || card;
                cardContent.appendChild(chartContainer);
            }
        }
        
    } catch (error) {
        console.error('Error updating individual card:', error);
        card.classList.add('error');
        const statNumber = card.querySelector('.stat-number');
        const statLabel = card.querySelector('.stat-label');
        if (statNumber) statNumber.textContent = 'Error';
        if (statLabel) statLabel.textContent = 'Failed to load data';
    }
}

/*************************************************************
 * STEP 4: UPDATE dashboard.js - updateStatsCards function
 * Find updateStatsCards and update the data mapping
 *************************************************************/

function updateStatsCards(data) {
    try {
        // Store data for export functionality
        travelStatsData = {
            airlines: data.mostUsedAirline,
            destinations: data.mostVisitedDestination,
            routes: data.totalSum || data.uniqueRoutes  // Handle both old and new format
        };

        // Update each card
        const cards = document.querySelectorAll('.travel-stats .stat-card');
        
        // Airlines card with bar chart
        if (cards[0]) {
            updateCard(cards[0], data.mostUsedAirline);
        }
        
        // Destinations card  
        if (cards[1]) {
            updateCard(cards[1], data.mostVisitedDestination);
        }
        
        // Total Sum card (was routes)
        if (cards[2] && data.totalSum) {
            updateCard(cards[2], {
                value: data.totalSum.formattedValue || `${data.totalSum.currency} ${data.totalSum.value}`,
                label: data.totalSum.subtitle,
                details: []
            });
        } else if (cards[2] && data.uniqueRoutes) {
            // Fallback for old format
            updateCard(cards[2], data.uniqueRoutes);
        }

        console.log('✅ Stats cards updated successfully');
        
    } catch (error) {
        console.error('❌ Error updating stats cards:', error);
    }
}

/*************************************************************
 * STEP 5: UPDATE auth.js on the server
 * Find the transformedData section in /api/stats route
 * Update the uniqueRoutes/totalSum mapping
 *************************************************************/

// In server/routes/auth.js, find this section in the /api/stats route:
                    uniqueRoutes: {
                        value: functionResult.stats?.flightMetrics?.value?.toString() || '0',
                        label: functionResult.stats?.flightMetrics?.subtitle || 'No routes found',
                        details: (functionResult.stats?.flightMetrics?.topRoutes || [])...

// REPLACE WITH:
                    totalSum: functionResult.stats?.totalSum ? {
                        value: functionResult.stats.totalSum.value,
                        currency: functionResult.stats.totalSum.currency,
                        subtitle: functionResult.stats.totalSum.subtitle,
                        formattedValue: functionResult.stats.totalSum.formattedValue
                    } : {
                        value: '0',
                        currency: 'NOK',
                        subtitle: 'No data available',
                        formattedValue: 'NOK 0.00'
                    }

/*************************************************************
 * DEPLOYMENT CHECKLIST
 *************************************************************/
1. ✓ Update Azure Function index.js (calculateDynamicStats function)
2. ✓ Add CSS to styles.css (bar chart styles)
3. ✓ Update dashboard.js (updateCard function)
4. ✓ Update dashboard.js (updateStatsCards function)
5. ✓ Update server/routes/auth.js (/api/stats route)
6. Deploy Azure Function
7. Restart Node.js server
8. Clear browser cache & refresh

/*************************************************************
 * END OF UPDATE GUIDE
 *************************************************************/
